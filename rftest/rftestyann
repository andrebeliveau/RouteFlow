#!/bin/bash

if [ "$EUID" != "0" ]; then
  echo "You must be root to run this script."
  exit 1
fi

SCRIPT_NAME="rftest3"
LXCDIR=/var/lib/lxc
IPC="mongodb"
MONGODB_CONF=/etc/mongodb.conf
MONGODB_PORT=27017
MONGODB_ADDR=192.168.10.1
CONTROLLER_PORT=6633
if [ -d ./build ]; then
    RF_HOME=$PWD
else
    RF_HOME=$PWD/..
fi

export PATH=$PATH:/usr/local/bin:/usr/local/sbin
export PYTHONPATH=$PYTHONPATH:$RF_HOME

cd $RF_HOME

wait_port_listen() {
    port=$1
    while ! `nc -z localhost $port` ; do
        echo -n .
        sleep 1
    done
}

echo_bold() {
    echo -e "\033[1m${1}\033[0m"
}

kill_process_tree() {
    top=$1
    pid=$2

    children=`ps -o pid --no-headers --ppid ${pid}`

    for child in $children
    do
        kill_process_tree 0 $child
    done

    if [ $top -eq 0 ]; then
        kill -9 $pid &> /dev/null
    fi
}

reset() {
    init=$1;
    if [ $init -eq 1 ]; then
        echo_bold "-> Starting $SCRIPT_NAME";
    else
        echo_bold "-> Stopping child processes...";
        kill_process_tree 1 $$
    fi

    ovs-vsctl del-br dp0 &> /dev/null;
    ovs-vsctl emer-reset &> /dev/null;

    echo_bold "-> Stopping and resetting LXC VMs...";
    for vm in "rfrrvmA" "rfrrvmB" "rfrrvmC" "rfrrvmD"
    do
        lxc-stop -n $vm
        rm -rf $LXCDIR/$vm/rootfs/var/run/network/ifstate;
    done

    echo_bold "-> Deleting (previous) run data...";
    mongo db --eval "
        db.getCollection('rftable').drop(); 
        db.getCollection('rfconfig').drop(); 
        db.getCollection('rfstats').drop(); 
        db.getCollection('rfclient<->rfserver').drop(); 
        db.getCollection('rfserver<->rfproxy').drop();
    "
        
    rm -rf $LXCDIR/rfrrvmA/rootfs/opt/rfclient;
    rm -rf $LXCDIR/rfrrvmB/rootfs/opt/rfclient;
    rm -rf $LXCDIR/rfrrvmC/rootfs/opt/rfclient;
    rm -rf $LXCDIR/rfrrvmD/rootfs/opt/rfclient;
}
#reset 1
#trap "reset 0; exit 0" INT

echo_bold "-> Setting up the management bridge (lxcbr0)..."
#ifconfig lxcbr0 $MONGODB_ADDR up

echo_bold "-> Starting the control plane network (dp0 VS)..."
ovs-vsctl add-br dp0
for i in 1 2 3; do
    for vm in rfrrvmA rfrrvmB rfrrvmC rfrrvmD; do
        ovs-vsctl add-port dp0 "$vm.$i"
    done
done
ovs-vsctl add-port dp0 rfrrvmA.4
ovs-vsctl add-port dp0 rfrrvmD.4
ovs-vsctl set Bridge dp0 other-config:datapath-id=7266767372667673
ovs-vsctl set-controller dp0 tcp:127.0.0.1:$CONTROLLER_PORT
ovs-vsctl set Bridge dp0 protocols=OpenFlow13
ovs-ofctl -O OpenFlow13 add-flow dp0 actions=CONTROLLER:65509

echo_bold "---"
echo_bold "This test is up and running."
echo_bold "Start Mininet:"
echo_bold "  $ sudo mn --custom mininet/custom/topo-4sw-4host.py --topo=rftest2"
echo_bold "    --controller=remote,ip=[host address],port=6633 --pre=ipconf"
echo_bold "Replace [host address] with the address of this host's interface "
echo_bold "connected to the Mininet VM."
echo_bold "Then try pinging everything:"
echo_bold "  mininet> pingall"
echo_bold "You can stop this test by pressing CTRL+C."
echo_bold "---"
wait

exit 0
